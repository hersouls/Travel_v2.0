# ✈️ Moonwave 여행 관리 화면정의서 v2.1

## 📋 목차
1. [프로젝트 개요](#📖-프로젝트-개요)
2. [데이터 구조](#📊-데이터-구조)
3. [화면 구조도](#🏗️-화면-구조도)
4. [화면별 상세 정의](#🎯-화면별-상세-정의)
   - 4.1. [메인 화면 (Home)](#1-메인-화면-home---moonwave-style-v32)
   - 4.2. [여행 생성 화면 (TripCreate)](#2-여행-생성-화면-tripcreate)
   - 4.3. [여행 상세 화면 (TripDetail)](#3-여행-상세-화면-tripdetail)
   - 4.4. [일정 편집 화면 (PlanDetail)](#4-일정-편집-화면-plandetail)
   - 4.5. [장소 검색 화면 (PlaceSearch)](#5-장소-검색-화면-placesearch)
   - 4.6. [지도 보기 화면 (TripMap)](#6-지도-보기-화면-tripmap)
5. [공통 컴포넌트](#🧩-공통-컴포넌트)
6. [상태 관리](#🔄-상태-관리)
7. [반응형 디자인](#📱-반응형-디자인)
8. [성능 최적화](#⚡-성능-최적화)
9. [접근성](#♿-접근성)
10. [PWA 설정](#📱-pwa-설정)

---

## 📖 프로젝트 개요

### 프로젝트 정보
- **프로젝트명**: Moonwave 여행 관리
- **도메인**: https://travel.moonwave.kr
- **기술 스택**: React 19 + Vite + Tailwind CSS + Radix UI + Firebase
- **배포**: GitHub Actions + Vercel
- **서비스 타입**: 정적 SPA + PWA

### 핵심 컨셉
> "여행의 모든 순간을 담다" - 계획부터 추억까지, 여행의 전 과정을 관리하는 스마트한 여행 도우미

### 주요 기능
- 📅 여행 일정 관리
- 🏨 숙소 및 교통 정보 관리
- 🗺️ 지도 기반 위치 표시 (Leaflet + OpenStreetMap)
- 🔍 개인 장소 라이브러리 검색
- 📤 일정 공유 및 PDF 내보내기
- 🔒 Firebase 익명 로그인

---

## 📊 데이터 구조

### Firestore 컬렉션 구조
```
trips/
  └── {tripId}/
      ├── info (기본 정보)
      └── plans/ (일정 서브컬렉션)
          └── {planId}

users/
  └── {userId}/
      ├── profile
      └── places/ (개인 장소 라이브러리)
          └── {placeId}
```

### 핵심 데이터 모델
```typescript
interface Trip {
  id: string;
  user_id: string;
  title: string;
  country: string;
  start_date: string;   // YYYY-MM-DD
  end_date: string;     // YYYY-MM-DD
  cover_image?: string; // Storage URL
  plans_count?: number;
  created_at: Timestamp;
  updated_at: Timestamp;
}

interface Plan {
  day: number;
  place_name: string;
  start_time: string;    // HH:mm
  end_time?: string;     // HH:mm
  type: 'attraction' | 'restaurant' | 'hotel' | 'transport' | 'other';
  address?: string;
  rating?: number;       // 0.0~5.0
  memo?: string;
  photos?: string[];     // Storage URLs
  youtube_link?: string;
  map_url?: string;      // 외부 지도 링크
  latitude?: number;     // 위도 (지도 표시용)
  longitude?: number;    // 경도 (지도 표시용)
  trip_id: string;
  created_at: Timestamp;
  updated_at: Timestamp;
}

interface Place {
  name: string;
  type: 'attraction' | 'restaurant' | 'hotel' | 'transport' | 'other';
  address?: string;
  rating?: number;
  map_url?: string;
  memo?: string;
  favorite: boolean;
  usage_count: number;
  created_at: Timestamp;
  updated_at: Timestamp;
}
```

---

## 🏗️ 화면 구조도

### 화면 플로우 다이어그램
```mermaid
flowchart TB
    Home[메인 화면<br/>(여행일정카드 목록)]:::main
    TripCreate[여행일정카드 생성]:::create
    TripDetail[여행일정 상세<br/>(Day별 목록)]:::detail
    PlanDetail[여행계획카드 상세/수정]:::plan
    PlaceSearch[장소 검색<br/>(개인 라이브러리)]:::search
    TripMap[전체 일정 지도 보기]:::map

    %% 연결선
    Home -->|여행 만들기| TripCreate
    Home -->|Trip 카드 클릭| TripDetail
    TripDetail -->|DayPlanCard 수정/추가| PlanDetail
    PlanDetail -->|장소 검색 열기| PlaceSearch
    TripDetail -->|지도 보기| TripMap
    TripMap -->|좌표 수정| PlanDetail

    %% 스타일
    classDef main fill:#C7DFF4,stroke:#03428E,color:#000,font-weight:bold;
    classDef create fill:#E5F9F9,stroke:#119891,color:#000;
    classDef detail fill:#DCFFFF,stroke:#2EC9D6,color:#000;
    classDef plan fill:#FDF5E6,stroke:#F59E0B,color:#000;
    classDef search fill:#FFF5F5,stroke:#EF4444,color:#000;
    classDef map fill:#F0FFF0,stroke:#10B981,color:#000;
```

### 네비게이션 구조
```
┌─────────────────────────────────────────┐
│           메인 화면 (/)                  │
│      (여행 일정 카드 목록)              │
└────────────────┬────────────────────────┘
         ┌───────┴──────┬─────────┐
         ▼              ▼         ▼
┌────────────┐  ┌────────────┐  ┌────────────┐
│ 여행 생성  │  │ 여행 상세  │  │지도 보기   │
│/trips/new  │  │/trips/{id} │  │/trips/{id}/│
│            │  │            │  │    map     │
└────────────┘  └─────┬──────┘  └────────────┘
                      │
         ┌────────────┼────────────┐
         ▼            ▼            ▼
┌────────────┐  ┌────────────┐  ┌────────────┐
│일정 편집   │  │장소 검색   │  │일정 공유   │
│/plans/{id} │  │/places/    │  │(모달)      │
│            │  │search      │  │            │
└────────────┘  └────────────┘  └────────────┘
```

---

## 🎯 화면별 상세 정의

### 1. 메인 화면 (Home) - Moonwave Style v3.2

#### 화면 ID: HOME-001
#### 화면명: 여행 일정 목록 (Trip List)
#### URL: `/`
#### 목적: 여행일정(Trip) 조회/검색/필터 + 신규 여행 생성 진입

#### 레이아웃 & 테마
```
┌─────────────────────────────────────────┐
│  Moonwave Travel                        │ 
│  bg-background moonwave-background      │
│  moonwave-starry                        │
├─────────────────────────────────────────┤
│  ┌──────────────────────────────┐      │
│  │     🌊 Moonwave Travel        │      │ Hero Section
│  │  나만의 특별한 여행을 만들어   │      │ (GlassCard strong)
│  │     여행의 모든 순간을 담다    │      │
│  │  [12 여행] [8 국가] [47 장소] │      │
│  └──────────────────────────────┘      │
│                                         │
│  ┌──────────────────────────────┐      │ Toolbar
│  │ 🔍 [검색...] [국가▼] [카드뷰] │      │
│  └──────────────────────────────┘      │
│                                         │
│  ┌─────────┐ ┌─────────┐ ┌─────────┐  │
│  │  도쿄   │ │  파리   │ │  뉴욕   │  │ TravelCardGrid
│  │ 3.15-22 │ │ 5.01-10 │ │ 7.20-30 │  │ (GlassCard default)
│  │ 8일/7박 │ │ 10일    │ │ 11일    │  │
│  └─────────┘ └─────────┘ └─────────┘  │
│                                         │
│                              [+]        │ FAB
└─────────────────────────────────────────┘
```

#### 컴포넌트 사양

##### HeroSection
```tsx
<GlassCard variant="strong" withWaveEffect className="gradient-mixed moonwave-glow animate-fade-in">
  <div className="text-center p-8">
    <h1 className="text-4xl font-bold mb-2">🌊 Moonwave Travel</h1>
    <p className="text-lg mb-6">나만의 특별한 여행을 만들어보세요</p>
    <div className="flex justify-center gap-6">
      <Badge>12 여행</Badge>
      <Badge>8 국가</Badge>
      <Badge>47 장소</Badge>
    </div>
  </div>
</GlassCard>
```

##### TravelCard
```tsx
<GlassCard variant="default" hoverable onClick={() => navigate(`/trips/${trip.id}`)}>
  <div className="relative">
    {trip.cover_image ? (
      <img src={trip.cover_image} className="w-full h-40 object-cover rounded-t" />
    ) : (
      <div className="w-full h-40 bg-muted rounded-t" />
    )}
    <Badge className="absolute top-2 right-2">{trip.country}</Badge>
  </div>
  <div className="p-4">
    <h3 className="font-semibold text-lg">{trip.title}</h3>
    <p className="text-sm text-muted-foreground">
      {formatDate(trip.start_date)} - {formatDate(trip.end_date)}
    </p>
    <div className="mt-2 flex justify-between items-center">
      <span className="text-sm">{trip.plans_count || 0}개 일정</span>
      <Progress value={calculateProgress(trip)} className="w-20 h-2" />
    </div>
  </div>
</GlassCard>
```

#### 반응형 대응
- **모바일** (< 640px): 단일 컬럼, FAB 하단 중앙
- **태블릿** (640px~): 2컬럼 그리드
- **데스크톱** (1024px~): 3컬럼 그리드

---

### 2. 여행 생성 화면 (TripCreate)

#### 화면 ID: CREATE-001  
#### 화면명: 새 여행 만들기
#### URL: `/trips/new`
#### 목적: 새 Trip 생성 (대표 이미지 업로드, 제목, 국가, 기간 입력)

#### 레이아웃
```
┌─────────────────────────────────────────┐
│  새로운 여행 시작하기                    │ Header
│  대표 이미지, 제목, 국가, 기간을 입력... │
├─────────────────────────────────────────┤
│  ┌──────────────────────────────┐      │ FormCard
│  │  [이미지 업로드 영역]         │      │ (GlassCard default)
│  │  드래그하거나 클릭하여...     │      │
│  ├──────────────────────────────┤      │
│  │ 여행 제목 * [_______________] │      │
│  │ 여행 국가 * [국가 선택 ▼]     │      │
│  │ 출발일 *    도착일 *          │      │
│  │ [____-__-__] [____-__-__]   │      │
│  └──────────────────────────────┘      │
│  ┌──────────────────────────────┐      │ InfoCard
│  │ 여행 기간: 2025.03.15 ~ 03.22│      │ (GlassCard light)
│  │ 총 일수: 8일                 │      │
│  └──────────────────────────────┘      │
├─────────────────────────────────────────┤
│  [취소]             [여행 만들기]       │ 하단 고정 액션바
└─────────────────────────────────────────┘
```

#### 입력 필드 & 검증 규칙
- **대표 이미지** (선택): drag & drop, 10MB 제한, jpg/png/webp
- **여행 제목** (필수): 2~60자, 트림 후 공백만 금지
- **여행 국가** (필수): 프리셋 셀렉트 (Japan, USA, Korea, Thailand 등)
- **여행 기간** (필수): start_date ≤ end_date, 총 일수 자동 계산

---

### 3. 여행 상세 화면 (TripDetail)

#### 화면 ID: DETAIL-001
#### 화면명: 여행 일정 상세
#### URL: `/trips/[id]`
#### 목적: Trip 단위의 Day별 계획 목록 조회/상호작용 (실시간 반영)

#### 레이아웃
```
┌─────────────────────────────────────────┐
│  [← 뒤로]          도쿄 여행    [지도]   │ Header
├─────────────────────────────────────────┤
│  ┌──────────────────────────────┐      │ TripHeader
│  │ [커버 이미지] 도쿄 벚꽃 여행  │      │ (GlassCard default)
│  │ 🇯🇵 Japan • 2025.03.15~22   │      │
│  │ 총 15개 계획 완료 12/15      │      │
│  └──────────────────────────────┘      │
│  ┌──────────────────────────────┐      │ Day 탭 (Sticky)
│  │ [Day 1] [Day 2*] [Day 3] ... │      │
│  └──────────────────────────────┘      │
│                                         │
│  Day 2 - 2025.03.16 (일)               │
│                                         │
│  ┌──────────────────────────────┐      │ DayPlanCard
│  │ 🚌 09:00~10:00               │      │
│  │ 시부야역 → 하라주쿠          │      │
│  │ 📍 도쿄도 시부야구...        │      │
│  │ ⭐ 4.2  📷 3장  [지도] [수정] │      │
│  └──────────────────────────────┘      │
│  ┌──────────────────────────────┐      │ 빈 상태
│  │    아직 계획이 없어요         │      │ (+ 계획 추가하기)
│  └──────────────────────────────┘      │
└─────────────────────────────────────────┘
```

#### Firebase 실시간 연동
```typescript
// Trip 정보 + 활성 Day의 Plans 실시간 구독
useEffect(() => {
  const tripRef = doc(db, 'trips', tripId);
  const unsubscribe = onSnapshot(tripRef, (doc) => {
    if (doc.exists()) {
      setTrip({ id: doc.id, ...doc.data() } as Trip);
    }
  });
  return unsubscribe;
}, [tripId]);

useEffect(() => {
  const plansRef = collection(db, 'trips', tripId, 'plans');
  const q = query(
    plansRef,
    where('day', '==', activeDay),
    orderBy('start_time', 'asc')
  );
  
  const unsubscribe = onSnapshot(q, (snapshot) => {
    const plans = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })) as Plan[];
    setPlans(plans);
  });
  
  return unsubscribe;
}, [tripId, activeDay]);
```

---

### 4. 일정 편집 화면 (PlanDetail)

#### 화면 ID: PLAN-001
#### 화면명: 일정 상세/수정
#### URL: `/trips/[tripId]/plans/new?day=1` (생성) | `/trips/[tripId]/plans/[planId]` (수정)
#### 목적: 특정 Trip에 속한 Plan을 생성/조회/수정/삭제

#### 레이아웃
```
┌─────────────────────────────────────────┐
│  [← 뒤로]         일정 편집             │ Header
├─────────────────────────────────────────┤
│  ┌──────────────────────────────┐      │ PlanHeader
│  │ 도쿄 벚꽃 여행               │      │ (GlassCard light)
│  │ 🇯🇵 2025.03.15~22 (8일)     │      │
│  │ Day 2 - 2025.03.16 (일)     │      │
│  └──────────────────────────────┘      │
│  ┌──────────────────────────────┐      │ PlanFormCard
│  │ Day: [2 ▼] 시간: [09:00~10:30]│     │ (GlassCard default)
│  │ 유형: [🎡 관광지 ▼]          │      │
│  │ 장소명: [시부야 스카이]       │      │
│  │ 주소: [도쿄도 시부야구...]    │      │
│  │ 평점: ⭐⭐⭐⭐☆ (4.0)        │      │
│  │ 위도: [35.6762] 경도: [139.65]│     │
│  │ 지도: [maps.app.goo.gl/...]  │      │
│  │ 영상: [youtube.com/watch...] │      │
│  │ 메모: [________________]     │      │
│  │ 사진 (3/5): [🖼️] [🖼️] [🖼️] │     │
│  └──────────────────────────────┘      │
├─────────────────────────────────────────┤
│ [삭제] [취소]           [저장하기]      │ 액션바 (Sticky)
└─────────────────────────────────────────┘
```

#### 핵심 필드
- **Day & 시간**: Day 선택, start_time/end_time (HH:mm)
- **유형 & 장소**: type 선택, place_name (필수)
- **위치 정보**: address, latitude/longitude (지도 표시용)
- **평가**: rating (0~5, 0.5 step), memo
- **링크**: map_url, youtube_link
- **미디어**: photos (최대 5장, Firebase Storage)

---

### 5. 장소 검색 화면 (PlaceSearch)

#### 화면 ID: SEARCH-001
#### 화면명: 장소 검색 및 선택
#### URL: `/places/search?tripId=[tripId]&day=[day]`
#### 목적: 개인 장소 라이브러리에서 검색·선택하거나, 새로 등록하여 Plan 작성에 활용

#### 데이터 모델 (개인 라이브러리)
```typescript
// users/{uid}/places/{placeId} 개인 장소 라이브러리
interface Place {
  name: string;
  type: 'attraction' | 'restaurant' | 'hotel' | 'transport' | 'other';
  address?: string;
  rating?: number;
  map_url?: string;
  memo?: string;
  favorite: boolean;     // 즐겨찾기 여부
  usage_count: number;   // 사용 횟수
  created_at: Timestamp;
  updated_at: Timestamp;
}
```

#### 레이아웃
```
┌─────────────────────────────────────────┐
│  [← 뒤로]        장소 검색              │ Header
├─────────────────────────────────────────┤
│  ┌──────────────────────────────┐      │ SearchHeader
│  │ 🔍 [검색어...]               │      │
│  │ [전체 ▼] [업데이트순 ▼]      │      │
│  │            [+ 새 장소 추가]  │      │
│  └──────────────────────────────┘      │
│                                         │
│  검색 결과 (15개)                       │
│  ┌──────────────────────────────┐      │ PlaceCard
│  │ 🎡 시부야 스카이            ⭐  │      │ (클릭하여 선택)
│  │ 📍 도쿄도 시부야구...        │      │
│  │ ⭐ 4.2  🗺️ 지도  📝 메모    │      │
│  │ 사용 3회 • 2일 전 업데이트   │      │
│  └──────────────────────────────┘      │
│                                         │
│  ┌──────────────────────────────┐      │ 새 장소 추가 폼
│  │ 새 장소 추가                │      │ (인라인 표시)
│  │ 장소명: [___] 유형: [___▼]   │      │
│  │ 주소: [___] 평점: ⭐⭐⭐☆☆   │      │
│  │ [취소] [저장]                │      │
│  └──────────────────────────────┘      │
└─────────────────────────────────────────┘
```

#### 검색 & 필터링
- **검색**: 장소명, 주소 포함 검색 (300ms 디바운스)
- **유형 필터**: 전체/관광지/식당/숙소/교통/기타
- **정렬**: 최근 업데이트/즐겨찾기/자주 사용
- **즐겨찾기**: 클릭으로 토글, 별표 아이콘

#### 선택 플로우
1. 장소 검색/선택 → usage_count 증가
2. Plan 작성 화면으로 이동 (placeId 파라미터)
3. 새 장소 등록 → 개인 라이브러리에 추가 후 선택

---

### 6. 지도 보기 화면 (TripMap)

#### 화면 ID: MAP-001
#### 화면명: 전체 일정 지도 보기
#### URL: `/trips/[tripId]/map`
#### 목적: Trip의 모든 Plans을 지도 상에 표시 (Google Maps API 미사용, Leaflet + OpenStreetMap)

#### 기술 스택
- **지도 라이브러리**: Leaflet + react-leaflet
- **타일 서버**: OpenStreetMap (free, no API key)
- **대안 타일**: CartoDB, Stamen (API 키 불필요)
- **좌표 입력**: 수동 입력 UX

#### 레이아웃
```
┌─────────────────────────────────────────┐
│  [← 뒤로]        지도 보기              │ Header
├─────────────────────────────────────────┤
│  ┌──────────────────────────────────────┐│ TripHeader
│  │ 도쿄 벚꽃 여행                       ││ (GlassCard light)
│  │ 2025.03.15~22 • 총 12곳 표시        ││
│  │ [Day 1] [Day 2*] [All]              ││
│  └──────────────────────────────────────┘│
│                                          │
│  ┌──────────────────────────────────────┐│ MapContainer
│  │       🗾 Leaflet Map                  ││ (react-leaflet)
│  │  📍 시부야 스카이                    ││
│  │      🍜 이치란 라멘                  ││
│  │          🏨 호텔                     ││
│  └──────────────────────────────────────┘│
│                                          │
│  ┌──────────────────────────────────────┐│ PlanList (오른쪽)
│  │ 📍 시부야 스카이                     ││ (사이드바)
│  │ Day 1 • 09:00~11:00                 ││
│  │ ⭐ 4.2  [좌표 입력]                 ││
│  ├──────────────────────────────────────┤│
│  │ 🍜 이치란 라멘 하라주쿠점            ││
│  │ Day 1 • 12:00~13:30                 ││
│  │ 좌표 없음  [좌표 입력]               ││
│  └──────────────────────────────────────┘│
└─────────────────────────────────────────┘
```

#### MapView 컴포넌트
```tsx
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

<MapContainer
  center={[35.6762, 139.6503]} // 도쿄 중심
  zoom={12}
  className="h-full w-full"
  style={{ minHeight: '400px' }}
>
  <TileLayer
    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
    attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  />
  
  {filteredPlans.map((plan) => {
    if (!plan.latitude || !plan.longitude) return null;
    
    return (
      <Marker
        key={plan.id}
        position={[plan.latitude, plan.longitude]}
        icon={createPlanIcon(plan.type)}
      >
        <Popup maxWidth={250}>
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <span className="text-lg">{getTypeIcon(plan.type)}</span>
              <h3 className="font-medium">{plan.place_name}</h3>
            </div>
            <div className="text-sm text-gray-600">
              Day {plan.day} • {plan.start_time}
              {plan.end_time && `~${plan.end_time}`}
            </div>
            <div className="flex gap-2">
              <WaveButton variant="ghost" size="sm" 
                onClick={() => navigate(`/trips/${tripId}/plans/${plan.id}`)}>
                수정
              </WaveButton>
            </div>
          </div>
        </Popup>
      </Marker>
    );
  })}
</MapContainer>
```

#### 좌표 입력 기능
- **좌표 입력 모달**: 위도/경도 수동 입력 (위도: -90~90, 경도: -180~180)
- **좌표 찾기 가이드**: Google Maps/네이버 지도에서 우클릭으로 좌표 복사
- **지도 아이콘**: 유형별 색상 구분 (관광지: 초록, 식당: 주황, 숙소: 파랑, 교통: 보라)
- **Day 필터링**: 전체/Day 1/Day 2 등으로 표시 계획 필터링

#### 제약 사항 & 고려사항
- **API 키 불필요**: OpenStreetMap 무료 타일 사용
- **사용량 제한**: 일일 1000회 요청 제한 (일반적 사용에는 충분)
- **대안 타일**: CartoDB, Stamen 등으로 대체 가능
- **좌표 정확성**: 사용자가 수동으로 입력하므로 정확성은 사용자에게 의존

---

## 🧩 공통 컴포넌트

### 1. GlassCard (Moonwave Style v3.2)
```typescript
interface GlassCardProps {
  variant?: 'default' | 'strong' | 'light';
  withWaveEffect?: boolean;
  hoverable?: boolean;
  className?: string;
  children: React.ReactNode;
}

// 스타일링
// default: bg-white/10 backdrop-blur-md border border-white/20
// strong: bg-white/20 backdrop-blur-lg border border-white/30
// light: bg-white/5 backdrop-blur-sm border border-white/10
// hoverable: hover:shadow-lg hover:scale-[1.02] transition-all
```

### 2. WaveButton (웨이브 버튼)
```typescript
interface WaveButtonProps {
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  ripple?: boolean;
  children: React.ReactNode;
}

// 스타일링
// primary: bg-[var(--primary)] text-[var(--primary-foreground)]
// secondary: bg-[var(--secondary)] text-[var(--secondary-foreground)]
// ghost: bg-transparent hover:bg-white/10
// Ripple 애니메이션 포함
```

### 3. 여행 카드 (TripCard)
```tsx
<Card className="hover:shadow-lg transition-shadow p-4">
  <div className="flex justify-between items-start">
    <div>
      <h3 className="text-lg font-semibold">📍 {destination}</h3>
      <p className="text-sm text-gray-600">{dateRange}</p>
      <p className="text-sm">{trip.plans_count || 0}개 일정</p>
    </div>
    <Badge variant={status === 'ongoing' ? 'default' : 'outline'}>
      {statusLabel}
    </Badge>
  </div>
  <div className="mt-2 flex items-center justify-between">
    <span className="text-sm text-gray-500">{members}명</span>
    <Progress value={calculateProgress(trip)} className="w-20 h-2" />
  </div>
</Card>
```

### 4. 일정 카드 (PlanCard)
```tsx
<Card className="border-l-4 border-purple-400 p-3">
  <div className="flex items-start gap-3">
    <div className="text-sm font-semibold">{time}</div>
    <div className="flex-1">
      <h4 className="font-medium">{title}</h4>
      <p className="text-sm text-gray-600">{location}</p>
      {rating && <div className="flex items-center gap-1">
        <Star className="w-4 h-4 fill-current text-yellow-400" />
        <span className="text-sm">{rating}</span>
      </div>}
    </div>
  </div>
</Card>
```

---

## 🔄 상태 관리

### 전역 상태 (Firebase + Context)
```typescript
interface AppState {
  user: User | null;
  trips: Trip[];
  currentTrip: Trip | null;
  isLoading: boolean;
  error: string | null;
}
```

### Firebase 실시간 구독 패턴
```typescript
// Trip 목록 구독
useEffect(() => {
  if (!user) return;
  
  const tripsRef = collection(db, 'trips');
  const q = query(tripsRef, where('user_id', '==', user.uid), orderBy('updated_at', 'desc'));
  
  const unsubscribe = onSnapshot(q, (snapshot) => {
    const trips = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })) as Trip[];
    setTrips(trips);
  });
  
  return unsubscribe;
}, [user]);
```

---

## 📱 반응형 디자인

### 브레이크포인트
| 디바이스 | 너비 | 레이아웃 변경 |
|----------|------|---------------|
| 모바일 | ~640px | 단일 컬럼, 하단 고정 액션 |
| 태블릿 | 640px~ | 2컬럼 그리드, 사이드바 |
| 데스크톱 | 1024px~ | 3컬럼 그리드, 확장 뷰 |

### 모바일 최적화
- 스와이프 제스처 지원
- 하단 시트 UI 패턴
- 터치 타겟 최소 44px
- 고정 헤더/푸터

---

## ⚡ 성능 최적화

### 1. 데이터 최적화
- Firebase 실시간 리스너 최소화
- 페이지네이션 구현
- 이미지 lazy loading
- 오프라인 캐싱

### 2. 코드 최적화
```tsx
// 라우트별 코드 스플리팅
const TripDetail = lazy(() => import('./pages/TripDetail'));
const TripCreate = lazy(() => import('./pages/TripCreate'));
const PlanEdit = lazy(() => import('./pages/PlanEdit'));
const TripMap = lazy(() => import('./pages/TripMap'));
```

---

## ♿ 접근성

### ARIA 속성
- 모든 인터랙티브 요소에 aria-label
- 동적 콘텐츠에 aria-live
- 포커스 관리 및 키보드 네비게이션

### 스크린리더 지원
```tsx
<div role="region" aria-label="여행 일정 목록">
  <h2 className="sr-only">나의 여행 일정</h2>
  {trips.map(trip => (
    <article key={trip.id} aria-label={`${trip.title} 여행`}>
      {/* ... */}
    </article>
  ))}
</div>
```

---

## 📱 PWA 설정

### manifest.json
```json
{
  "name": "Moonwave Travel",
  "short_name": "Travel",
  "description": "여행 일정 관리 서비스",
  "start_url": "/",
  "display": "standalone",
  "theme_color": "#9333ea",
  "background_color": "#ffffff",
  "icons": [
    {
      "src": "/icon-192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icon-512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
```

### Service Worker
- 오프라인 캐싱
- 백그라운드 동기화
- 푸시 알림 (선택적)

---

## 📌 버전 정보
- **문서 버전**: v2.1
- **작성일**: 2025-08-08
- **주요 변경**: 
  - 문서 구조 재정렬 (데이터 구조 → 화면 구조도 → 화면별 정의 순서)
  - 지도 보기 화면 추가
  - Leaflet + OpenStreetMap 지도 기능 통합
  - 장소 검색 화면 개인 라이브러리 시스템 추가
  - Moonwave Style v3.2 디자인 시스템 적용